//This is the composite pattern java version, from which I wrote the simol version.

import java.util.ArrayList;
import java.util.List;

// Component interface
interface FileComponent {
    void display();
}

// Leaf class
class File implements FileComponent {
    private String name;

    public File(String name) {
        this.name = name;
    }

    public void display() {
        System.out.println("File: " + name);
    }
}

// Composite class
class Folder implements FileComponent {
    private String name;
    private List<FileComponent> children = new ArrayList<>();

    public Folder(String name) {
        this.name = name;
    }

    public void add(FileComponent component) {
        children.add(component);
    }

    public void remove(FileComponent component) {
        children.remove(component);
    }

    public void display() {
        System.out.println("Folder: " + name);
        for (FileComponent component : children) {
            component.display();
        }
    }
}

public class CompositePatternExample {
    public static void main(String[] args) {
        Folder root = new Folder("Root");
        Folder documents = new Folder("Documents");
        Folder pictures = new Folder("Pictures");
        File file1 = new File("File1.txt");
        File file2 = new File("File2.jpg");
        File file3 = new File("File3.docx");

        documents.add(file1);
        pictures.add(file2);
        documents.add(file3);
        root.add(documents);
        root.add(pictures);

        root.display();
    }
}
