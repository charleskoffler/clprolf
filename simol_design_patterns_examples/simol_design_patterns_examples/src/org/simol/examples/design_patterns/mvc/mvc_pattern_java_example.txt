import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

// Model: WeatherModel stores the weather data
class WeatherModel {
    private String location;
    private String forecast;

    public void setLocation(String location) {
        this.location = location;
    }

    public void fetchWeather() {
        // Simulate fetching weather data from an external API
        // In a real application, you would make an API request here
        // For simplicity, we'll just set a hardcoded forecast.
        this.forecast = "Sunny with a chance of clouds";
    }

    public String getForecast() {
        return forecast;
    }
}

// View: WeatherView displays the weather information
class WeatherView {
    private JFrame frame;
    private JTextField locationField;
    private JTextArea forecastArea;

    public WeatherView() {
        frame = new JFrame("Weather Forecast");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 200);

        JPanel panel = new JPanel(new BorderLayout());

        JLabel locationLabel = new JLabel("Enter Location:");
        locationField = new JTextField(20);

        JButton fetchButton = new JButton("Fetch Weather");
        forecastArea = new JTextArea(5, 30);
        forecastArea.setEditable(false);

        panel.add(locationLabel, BorderLayout.NORTH);
        panel.add(locationField, BorderLayout.CENTER);
        panel.add(fetchButton, BorderLayout.SOUTH);
        panel.add(new JScrollPane(forecastArea), BorderLayout.SOUTH);

        frame.getContentPane().add(panel);

        frame.setVisible(true);
    }

    public String getLocation() {
        return locationField.getText();
    }

    public void setForecast(String forecast) {
        forecastArea.setText(forecast);
    }

    public void addFetchListener(ActionListener listener) {
        locationField.addActionListener(listener);
    }
}

// Controller: WeatherController handles user interactions
class WeatherController {
    private WeatherModel model;
    private WeatherView view;

    public WeatherController(WeatherModel model, WeatherView view) {
        this.model = model;
        this.view = view;

        view.addFetchListener(new FetchListener());
    }

    class FetchListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String location = view.getLocation();
            model.setLocation(location);
            model.fetchWeather();
            String forecast = model.getForecast();
            view.setForecast(forecast);
        }
    }
}

public class WeatherApp {
    public static void main(String[] args) {
        WeatherModel model = new WeatherModel();
        WeatherView view = new WeatherView();
        WeatherController controller = new WeatherController(model, view);
    }
}
